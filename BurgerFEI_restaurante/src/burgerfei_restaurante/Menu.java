/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package burgerfei_restaurante;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author flomaidar
 */
public class Menu extends javax.swing.JFrame {

    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cpf_txt = new javax.swing.JTextField();
        excluir_cliente = new javax.swing.JButton();
        exibir_pedido = new javax.swing.JButton();
        exibir_extrato = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        exibir_contas = new javax.swing.JButton();
        exibir_fila = new javax.swing.JButton();
        exibir_historico = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Clientes", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jLabel1.setText("CPF:");

        excluir_cliente.setText("Excluir cadastro do cliente");
        excluir_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluir_clienteActionPerformed(evt);
            }
        });

        exibir_pedido.setText("Exibir pedido do cliente");
        exibir_pedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibir_pedidoActionPerformed(evt);
            }
        });

        exibir_extrato.setText("Exibir extrato do pedido do cliente");
        exibir_extrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibir_extratoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(excluir_cliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(cpf_txt))
                    .addComponent(exibir_pedido, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exibir_extrato, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(cpf_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exibir_pedido)
                .addGap(10, 10, 10)
                .addComponent(exibir_extrato)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(excluir_cliente)
                .addGap(10, 10, 10))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sistema", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        exibir_contas.setText("Exibir todas as contas do aplicativo");
        exibir_contas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibir_contasActionPerformed(evt);
            }
        });

        exibir_fila.setText("Exibir pedidos a serem produzidos");
        exibir_fila.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibir_filaActionPerformed(evt);
            }
        });

        exibir_historico.setText("Exibir hist√≥rico de pedidos");
        exibir_historico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exibir_historicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(exibir_fila, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(exibir_contas, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(exibir_historico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exibir_contas)
                .addGap(10, 10, 10)
                .addComponent(exibir_fila)
                .addGap(10, 10, 10)
                .addComponent(exibir_historico)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void excluir_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluir_clienteActionPerformed
        String cpf = cpf_txt.getText();
        ArrayList <String> lista = new ArrayList<>();
        DAO_cliente crud = new DAO_cliente();
        DAO_pedido crud2 = new DAO_pedido();
        
        //checa se existe cliente com aquele cpf
        boolean rs2 = crud.checkCPF(cpf);
        if (rs2){
            try {
                //busca os dados, para printar no pop_up
                ResultSet rs = crud.buscarPorCPF(cpf);
                while (rs.next()) {
                    lista.add("Nome: " + rs.getString("NOME") + " ------------ " + "CPF: "
                            + rs.getString("CPF")+"\n");
                    String formattedString = lista.toString()
                    .replace(",", "")  //remove the commas
                    .replace("[", "")  //remove the right bracket
                    .replace("]", "");  //remove the left bracket
                    
                    //remove cliente e pedido em andamento do cliente
                    crud.remover(cpf);
                    crud2.remover(cpf);
                    JOptionPane.showMessageDialog(null,"Cliente:\n"+formattedString+"\nExcluido com sucesso!", "Excluir cliente", JOptionPane.INFORMATION_MESSAGE);

                }
            } catch( SQLException e) {
                System.out.println("Voc√™ n√£o possu√≠ cadastro ainda");
            }
        }else
            JOptionPane.showMessageDialog(null, "N√£o existe nenhum cliente com este CPF.", "Excluir cliente", JOptionPane.ERROR_MESSAGE);  

    }//GEN-LAST:event_excluir_clienteActionPerformed

    private void exibir_pedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibir_pedidoActionPerformed
        String cpf = cpf_txt.getText();
        ArrayList <String> array = new ArrayList<>();
        DAO_pedido crud = new DAO_pedido();
        DAO_cliente crud2 = new DAO_cliente();

        //salva vetor com nomes
        String nome[] = new String[7];
        nome[0] = "X-Salada";
        nome[1] = "X-Burger";
        nome[2] = "Cachorro Quente";
        nome[3] = "Misto Quente";
        nome[4] = "Salada de Frutas";
        nome[5] = "Refrigerante";
        nome[6] = "Suco Natural";
        
        int quantidade[] = new int[7];
        boolean rs3 = crud2.checkCPF(cpf);
        boolean rs2 = crud.checkPedido(cpf);
        
        ///checa se existe cliente com esse cpf
        if (rs3){
            //checa se existe pedido em andamento para esse cliente
            if (rs2){
                try {
                    //busca o pedido e adiciona quantidades no vetor
                    ResultSet rs = crud.buscarPorCPF(cpf);
                    while (rs.next()) {
                        if(rs.getInt("SALADA")!=0)
                            quantidade[0] = rs.getInt("SALADA");
                        if(rs.getInt("BURGER")!=0)
                            quantidade[1] = rs.getInt("BURGER");
                        if(rs.getInt("CACHORRO")!=0)
                            quantidade[2] = rs.getInt("CACHORRO");
                        if(rs.getInt("MISTO")!=0)
                            quantidade[3] = rs.getInt("MISTO");
                        if(rs.getInt("FRUTAS")!=0)
                            quantidade[4] = rs.getInt("FRUTAS");
                        if(rs.getInt("REFRI")!=0)
                            quantidade[5] = rs.getInt("REFRI");
                        if(rs.getInt("SUCO")!=0)
                            quantidade[6] = rs.getInt("SUCO");

                    //cria array apenas com valores diferentes de 0
                    for (int i = 0; i < 7; i++){   
                        if (quantidade[i] !=0)
                            array.add(String.format("%2dx  %-50s\n", quantidade[i], nome[i]));
                    } 

                    //pra printar uma lista sem [,]
                    String formattedString = array.toString()
                    .replace(",", "")  //remove the commas
                    .replace("[", " ")  //remove the right bracket
                    .replace("]", "");  //remove the left bracket

                    
                    String[] opcoes = {"Alterar status do pedido para 'PRONTO'","OK"};
                    int indice = JOptionPane.showOptionDialog(null, "Pedido:\n" + formattedString , "Pedido do cliente", JOptionPane.DEFAULT_OPTION, JOptionPane.PLAIN_MESSAGE, null, opcoes, opcoes[1]);
                    
                    //alterar pedido para pronto
                    if (indice == 0){  
                        //cria um pedido com as quantidades na classe
                        Historico pedido = new Historico(quantidade);
                        DAO_historico crud3 = new DAO_historico();
                        //insere o pedido no banco de dados de historico
                        crud3.inserir(cpf,pedido.getValor_total(), pedido.getVetor());
                        //remove o pedido no banco de dados de pedidos em andamento
                        crud.remover(cpf);
                    }
                    }

                } catch( SQLException e) {
                    System.out.println("ERRO");
                }
            }else
                JOptionPane.showMessageDialog(null, "Este cliente n√£o possu√≠ nenhum pedido em andamento.", "Exibir pedidos", JOptionPane.ERROR_MESSAGE);
        }else
            JOptionPane.showMessageDialog(null, "N√£o existe nenhum cliente com este CPF.", "Exibir pedidos", JOptionPane.ERROR_MESSAGE);
        
        
    }//GEN-LAST:event_exibir_pedidoActionPerformed

    private void exibir_extratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibir_extratoActionPerformed
        String cpf = cpf_txt.getText();
        ArrayList <String> lista = new ArrayList<>();
        DAO_pedido crud = new DAO_pedido();
        DAO_cliente crud2 = new DAO_cliente();

        boolean rs2 = crud.checkPedido(cpf);
        boolean rs3 = crud2.checkCPF(cpf);
        
        //checa se existe cliente com esse cpf
        if (rs3){
            //checa se existe pedido em andamento para esse cpf
            if (rs2){
                try {
                    //busca o pedido e insere na lista os que tiverem quantidade diferente de 0, junto com seus valores
                    ResultSet rs = crud.buscarPorCPF(cpf);
                    while (rs.next()) {
                        if(rs.getInt("SALADA")!=0)
                            lista.add("X-SALADA                          "+ rs.getInt("SALADA")+"x R$10.00      (R$"+ String.format("%.2f",(rs.getInt("SALADA")*10.0))+")\n");
                        if(rs.getInt("BURGER")!=0)
                            lista.add("X-BURGER                           "+ rs.getInt("BURGER")+"x R$10.00      (R$"+ String.format("%.2f",(rs.getInt("BURGER")*10.0))+")\n");
                        if(rs.getInt("CACHORRO")!=0)
                            lista.add("CACHORRO QUENTE           "+ rs.getInt("CACHORRO")+"x R$ 7.50       (R$"+ String.format("%.2f",(rs.getInt("CACHORRO")*7.5))+")\n");
                        if(rs.getInt("MISTO")!=0)
                            lista.add("MISTO QUENTE                   "+ rs.getInt("MISTO")+"x R$ 8.00       (R$"+ String.format("%.2f",(rs.getInt("MISTO")*8.0))+")\n");
                        if(rs.getInt("FRUTAS")!=0)
                            lista.add("SALADA DE FRUTAS            "+ rs.getInt("FRUTAS")+"x R$ 5.50       (R$"+ String.format("%.2f",(rs.getInt("FRUTAS")*5.5))+")\n");
                        if(rs.getInt("REFRI")!=0)
                            lista.add("REFRIGERANTE                    "+ rs.getInt("REFRI")+"x R$ 4.50       (R$"+ String.format("%.2f",(rs.getInt("REFRI")*4.5))+")\n");
                        if(rs.getInt("SUCO")!=0)
                            lista.add("SUCO NATURAL                  "+ rs.getInt("SUCO")+"x R$ 6.25       (R$"+ String.format("%.2f",(rs.getInt("SUCO")*6.25))+")\n");

                        
                        //pra printar uma lista sem [,]
                        String formattedString = lista.toString()
                        .replace(",", "")  //remove the commas
                        .replace("[", " ")  //remove the right bracket
                        .replace("]", "");  //remove the left bracket


                        String valor_final = String.format("%.2f", rs.getDouble("VALOR_TOTAL"));             
                        JOptionPane.showMessageDialog(null, "Extrato:\n-----------------------------------------\n"+ formattedString + "-----------------------------------------\n Valor Total: ------------------------ R$" + valor_final, "Extrato", JOptionPane.PLAIN_MESSAGE);

                    }
                } catch( SQLException e) {
                    System.out.println("Voc√™ n√£o possu√≠ um pedido ainda");
                }
            }else
                JOptionPane.showMessageDialog(null, "Este cliente n√£o possu√≠ nenhum pedido em andamento.", "Exibir pedidos", JOptionPane.ERROR_MESSAGE);
        }else
            JOptionPane.showMessageDialog(null, "N√£o existe nenhum cliente com este CPF.", "Exibir pedidos", JOptionPane.ERROR_MESSAGE);
      
    }//GEN-LAST:event_exibir_extratoActionPerformed

    private void exibir_contasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibir_contasActionPerformed
        DAO_cliente crud = new DAO_cliente();
        ArrayList <String> lista = new ArrayList<>();
        try {
            //busca por cpf todos os dados do banco clientes
            ResultSet rs = crud.buscar();
            while (rs.next()) {
                lista.add("Nome: " + rs.getString("NOME") + "   ---------------   " + "CPF: "
                        + rs.getString("CPF")+"\n");
            }
            
            //pra printar uma lista sem [,]
            String formattedString = lista.toString()
                .replace(",", "")  //remove the commas
                .replace("[", " ")  //remove the right bracket
                .replace("]", "");  //remove the left bracket
            
            JOptionPane.showMessageDialog(null, formattedString, "Contas:", JOptionPane.PLAIN_MESSAGE);
            
        } catch( SQLException e) {
            System.out.println("Consulta n√£o foi poss√≠vel" + e.getMessage());
        }

    }//GEN-LAST:event_exibir_contasActionPerformed

    private void exibir_filaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibir_filaActionPerformed
        DAO_pedido crud = new DAO_pedido();
        ArrayList <String> pedidos = new ArrayList<>();
        ArrayList <String> fila = new ArrayList<>();
        
        try {
            //busca por cpf todos os dados do banco pedido
            ResultSet rs = crud.buscar();
        
            //adiciona na lista apenas os que tem valor diferente de 0, junto com seus nomes
            while (rs.next()) {
                if(rs.getInt("SALADA")!=0)
                    pedidos.add(rs.getInt("SALADA")+"x   X-SALADA\n");
                if(rs.getInt("BURGER")!=0)
                    pedidos.add(rs.getInt("BURGER")+"x   X-BURGER\n");
                if(rs.getInt("CACHORRO")!=0)
                    pedidos.add(rs.getInt("CACHORRO")+"x   CACHORRO QUENTE\n");
                if(rs.getInt("MISTO")!=0)
                    pedidos.add(rs.getInt("MISTO")+"x   MISTO QUENTE\n");
                if(rs.getInt("FRUTAS")!=0)
                    pedidos.add(rs.getInt("FRUTAS")+"x   SALADA DE FRUTAS\n");
                if(rs.getInt("REFRI")!=0)
                    pedidos.add(rs.getInt("REFRI")+"x   REFRIGERANTE\n");
                if(rs.getInt("SUCO")!=0)
                    pedidos.add(rs.getInt("SUCO")+"x   SUCO NATURAL\n");

                
                //pra printar uma lista sem [,]
                String formattedString_pedidos = pedidos.toString()
                .replace(",", "")  //remove the commas
                .replace("[", " ")  //remove the right bracket
                .replace("]", "");  //remove the left bracket
                
                
                //adiciona o pedido a um array junto com cpf
                fila.add("CPF do cliente:" + rs.getString("CPF") + "  ------------------------------\n" + formattedString_pedidos);
                //limpa o array para os pr√≥ximos pedidos
                pedidos.clear();
            }
            
                //pra printar uma lista sem [,]
                String formattedString_fila = fila.toString()
                .replace(",", "")  //remove the commas
                .replace("[", "")  //remove the right bracket
                .replace("]", "");  //remove the left bracket
            
            JOptionPane.showMessageDialog(null, formattedString_fila, "Pedidos:", JOptionPane.PLAIN_MESSAGE);
        } catch( SQLException e) {
            System.out.println("Consulta n√£o foi poss√≠vel" + e.getMessage());
        }
    }//GEN-LAST:event_exibir_filaActionPerformed

    private void exibir_historicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exibir_historicoActionPerformed
        DAO_historico crud = new DAO_historico();
        ArrayList <String> pedidos = new ArrayList<>();
        ArrayList <String> fila = new ArrayList<>();
        
        try {
            //busca por cpf todos os dados do banco historico
            ResultSet rs = crud.buscar();
            
            //adiciona na lista apenas os que tem valor diferente de 0, junto com seus nomes
            while (rs.next()) {
                if(rs.getInt("SALADA")!=0)
                    pedidos.add(rs.getInt("SALADA")+"x   X-SALADA\n");
                if(rs.getInt("BURGER")!=0)
                    pedidos.add(rs.getInt("BURGER")+"x   X-BURGER\n");
                if(rs.getInt("CACHORRO")!=0)
                    pedidos.add(rs.getInt("CACHORRO")+"x   CACHORRO QUENTE\n");
                if(rs.getInt("MISTO")!=0)
                    pedidos.add(rs.getInt("MISTO")+"x   MISTO QUENTE\n");
                if(rs.getInt("FRUTAS")!=0)
                    pedidos.add(rs.getInt("FRUTAS")+"x   SALADA DE FRUTAS\n");
                if(rs.getInt("REFRI")!=0)
                    pedidos.add(rs.getInt("REFRI")+"x   REFRIGERANTE\n");
                if(rs.getInt("SUCO")!=0)
                    pedidos.add(rs.getInt("SUCO")+"x   SUCO NATURAL\n");
                
                
                //pra printar uma lista sem [,]
                String formattedString_pedidos = pedidos.toString()
                .replace(",", "")  //remove the commas
                .replace("[", " ")  //remove the right bracket
                .replace("]", "");  //remove the left bracket
                
                
                //adiciona o pedido a um array junto com cpf
                fila.add("CPF do cliente:" + rs.getString("CPF") + "  ------------------------------\n" + formattedString_pedidos);
                //limpa o array para os pr√≥ximos pedidos
                pedidos.clear();
            }
                
                //pra printar uma lista sem [,]
                String formattedString_fila = fila.toString()
                .replace(",", "")  //remove the commas
                .replace("[", "")  //remove the right bracket
                .replace("]", "");  //remove the left bracket
            
            JOptionPane.showMessageDialog(null, formattedString_fila, "Pedidos:", JOptionPane.PLAIN_MESSAGE);
        } catch( SQLException e) {
            System.out.println("Consulta n√£o foi poss√≠vel" + e.getMessage());
        }
    }//GEN-LAST:event_exibir_historicoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cpf_txt;
    private javax.swing.JButton excluir_cliente;
    private javax.swing.JButton exibir_contas;
    private javax.swing.JButton exibir_extrato;
    private javax.swing.JButton exibir_fila;
    private javax.swing.JButton exibir_historico;
    private javax.swing.JButton exibir_pedido;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
